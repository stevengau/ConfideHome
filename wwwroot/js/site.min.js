function generateMap(e) { for (var t = JSON.parse(e), r = { type: "FeatureCollection", features: [] }, o = 0; o < t.length; o++) { var a = t[o], s = { type: "Feature", geometry: { type: "Point", coordinates: [a.Location.coordinates[1], a.Location.coordinates[0]] }, properties: { listing_id: a.MlsNo } }; r.features.push(s) } null == map.getSource("earthquakes") && (map.addSource("earthquakes", { type: "geojson", data: r, cluster: !0, clusterMaxZoom: 14, clusterRadius: 50 }), map.addLayer({ id: "clusters", type: "circle", source: "earthquakes", filter: ["has", "point_count"], paint: { "circle-color": ["step", ["get", "point_count"], "#51bbd6", 100, "#f1f075", 750, "#f28cb1"], "circle-radius": ["step", ["get", "point_count"], 20, 100, 30, 750, 40] } }), map.addLayer({ id: "cluster-count", type: "symbol", source: "earthquakes", filter: ["has", "point_count"], layout: { "text-field": "{point_count_abbreviated}", "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"], "text-size": 12 } }), map.addLayer({ id: "unclustered-point", type: "circle", source: "earthquakes", filter: ["!", ["has", "point_count"]], paint: { "circle-color": "#11b4da", "circle-radius": 14, "circle-stroke-width": 1, "circle-stroke-color": "#fff" } })), map.getSource("earthquakes").setData(r), map.on("click", "clusters", function (e) { var t = map.queryRenderedFeatures(e.point, { layers: ["clusters"] }); console.log(t); var r = t[0].properties.cluster_id; map.getSource("earthquakes").getClusterLeaves(r, 50, 0, function (e, t) { console.log(t) }) }), map.on("mouseenter", "clusters", function () { map.getCanvas().style.cursor = "pointer" }), map.on("mouseleave", "clusters", function () { map.getCanvas().style.cursor = "" }) }